{"version":3,"sources":["logo.svg","remoteclient.js","TransactionList.js","NodeExplorer.js","NodeDetails.js","GameBoard.js","TransactionDetails.js","MockEnvironmentDialogue.js","App.js","reportWebVitals.js","index.js"],"names":["getServer","console","log","window","location","href","indexOf","getNodes","callback","a","url","fetch","method","credentials","headers","then","response","status","json","catch","err","reply","sendChallenge","gameboard","counterParty","escrow","choice","sendAcceptChallenge","challenge","linearId","challenged","getTransactions","getTransactionDetails","transaction","id","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","TransactionList","props","onTransactionSelected","classes","React","useState","txList","setTransactionList","useEffect","transactions","List","className","map","item","i","ListItem","onClick","style","cursor","ListItemAvatar","Avatar","class","ListItemText","primary","secondary","NodeExplorer","onNodeSelected","nodes","setNodes","nodeList","length","name","identities","organisation","address","addresses","node","NodeDetails","textAlign","src","formControl","margin","spacing","minWidth","selectEmpty","marginTop","GameBoard","onChange","setEscrow","setCounterParty","setChoice","error","setError","ready","currentNode","find","isCurrentNode","FormControl","InputLabel","Select","labelId","value","event","target","MenuItem","FormHelperText","display","button","marginRight","actionsContainer","marginBottom","resetContainer","padding","TransactionDetails","transactionDetails","setTransactionDetails","activeStep","setActiveStep","steps","handleChoiceChange","acceptChallenge","ChallengeState","getStepContent","step","IssuedState","collapsed","challenger","AcceptedState","Button","variant","color","disabled","SettledState","Stepper","orientation","label","index","Step","StepLabel","StepContent","Typography","avatar","blue","TabPanel","children","other","component","role","hidden","aria-labelledby","Box","p","position","minHeight","fab","bottom","right","fabGreen","common","white","green","a11yProps","App","setValue","gameboardReady","setGameboardReady","setGameboard","nodeDetails","setNodeDetails","startGame","useTheme","transitionDuration","enter","transitions","duration","enteringScreen","exit","leavingScreen","fabs","icon","action","color2","display2","clsx","icon2","className2","action2","AppBar","Tabs","newValue","indicatorColor","textColor","aria-label","Tab","challengerChoice","axis","direction","onChangeIndex","dir","game","Zoom","in","timeout","transitionDelay","unmountOnExit","Fab","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84a2688a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","const LOCAL_SERVER=\"http://localhost:10050/\";\nconst GET_NODES_API=\"getnodes\";\nconst ISSUE_API=\"issue\";\nconst GET_TRANSACTIONS_API=\"gettransactions\";\nconst GET_TRANSACTION_DETAILS_API=\"getstatesbylinearid\";\nconst ACCEPT_CHALLENGE_API=\"accept\";\n\nfunction getServer() {\n    console.log(\"getServer\", window.location.href);\n    if (window.location.href.indexOf('3000')>-1) {\n        return LOCAL_SERVER;\n    } else {\n        console.log(\"getServer returning\", window.location.href);\n        return window.location.href;\n    }\n}\n\nexport const getNodes = async(callback) => {\n    let url=`${getServer()}${GET_NODES_API}`;\n    console.log(\"getNodes url\", url);\n    let reply = await fetch(url, {\n        method: \"GET\",\n        credentials: \"same-origin\", // send cookies\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        },\n    })\n        .then(function (response) {\n            let responseCode = response.status;\n            return response.json();\n\n        })\n        .then(function (json) {\n            return json\n        }).catch(err=>{\n            console.log(\"getNodes error\", err);\n        })\n        console.log(\"getNodes\", reply);\n    callback(reply);\n}\nexport const sendChallenge = async(gameboard, callback) => {\n    console.log(\"sendChallenge\", gameboard);\n    let url=`${getServer()}${ISSUE_API}?counterParty=${gameboard.counterParty}&escrowParty=${gameboard.escrow}&choice=${gameboard.choice}`;\n    let reply = await fetch(url, {\n        method: \"GET\",\n        credentials: \"same-origin\", // send cookies\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        },\n    })\n        .then(function (response) {\n            let responseCode = response.status;\n            return response.json();\n\n        })\n        .then(function (json) {\n            return json\n        }).catch(err=>{\n            console.log(\"sendChallenge error\", err);\n        })\n        console.log(\"sendChallenge\", reply);\n    callback(reply);\n}\n\nexport const sendAcceptChallenge =  async(challenge, callback) => {\n    console.log(\"sendAcceptChallenge\", challenge);\n    let url=`${getServer()}${ACCEPT_CHALLENGE_API}?linearId=${challenge.linearId}&choice=${challenge.choice}&escrowParty=${challenge.escrow}&challenged=${challenge.challenged}`;\n    let reply = await fetch(url, {\n        method: \"GET\",\n        credentials: \"same-origin\", // send cookies\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        },\n    })\n        .then(function (response) {\n            let responseCode = response.status;\n            return response.json();\n\n        })\n        .then(function (json) {\n            return json\n        }).catch(err=>{\n            console.log(\"sendAcceptChallenge error\", err);\n        })\n        console.log(\"sendAcceptChallenge\", reply);\n    callback(reply);\n}\nexport const getTransactions = async(callback) => {\n    let url=`${getServer()}${GET_TRANSACTIONS_API}`;\n    console.log(\"getTransactions url\", url);\n    let reply = await fetch(url, {\n        method: \"GET\",\n        credentials: \"same-origin\", // send cookies\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        },\n    })\n        .then(function (response) {\n            let responseCode = response.status;\n            return response.json();\n\n        })\n        .then(function (json) {\n            return json\n        }).catch(err=>{\n            console.log(\"getTransactions error\", err);\n        })\n        console.log(\"getTransactions\", reply);\n    callback(reply);\n}\nexport const getTransactionDetails = async(transaction, callback) => {\n    let url=`${getServer()}${GET_TRANSACTION_DETAILS_API}?linearId=${transaction.id}`;\n    console.log(\"getTransactionDetails url\", url);\n    let reply = await fetch(url, {\n        method: \"GET\",\n        credentials: \"same-origin\", // send cookies\n        headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n        },\n    })\n        .then(function (response) {\n            let responseCode = response.status;\n            return response.json();\n\n        })\n        .then(function (json) {\n            return json\n        }).catch(err=>{\n            console.log(\"getTransactionDetails error\", err);\n        })\n        console.log(\"getTransactionDetails\", reply);\n    callback(reply);\n}\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\n\nimport ImageIcon from '@material-ui/icons/Image';\nimport AccountBalance from '@material-ui/icons/AccountBalance';\nimport EmojiEvents from '@material-ui/icons/EmojiEvents';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\n\nimport WorkIcon from '@material-ui/icons/Work';\nimport BeachAccessIcon from '@material-ui/icons/BeachAccess';\nimport {getTransactions} from './remoteclient'\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n  }));\n\nfunction TransactionList(props) {\n    const { onTransactionSelected, ...other } = props;\n    const classes = useStyles();\n    const [txList, setTransactionList] = React.useState([]);\n    React.useEffect(() => {\n        getTransactions(function(transactions) {\n            console.log(\"transactions\", transactions);\n            setTransactionList(transactions);\n        })\n      }, []);\n      \n    return (\n        <List className={classes.root}>\n            {txList && txList.map((item,i)=>{\n                return(\n                <ListItem onClick={()=>onTransactionSelected(item)} style={{cursor:'pointer'}}>\n                    <ListItemAvatar>\n                    <Avatar>\n                        {item.class=='com.axa.RockPaperScissorsIssuedState' && <EmojiEvents />}\n                        {item.status=='com.axa.RockPaperScissorsChallengeState' && <ScheduleIcon />}\n                        {item.status=='com.axa.RockPaperScissorsAcceptedState' && <ScheduleIcon />}\n                        {item.status=='com.axa.RockPaperScissorsSettledState' && <AccountBalance />}\n                    </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText primary={item.id} secondary={/*new Date(1*item.recordedTime).toISOString()*/item.class} />\n              </ListItem>\n                )\n            })\n            }\n        </List>\n    )\n}\nexport default TransactionList;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\n\nimport ImageIcon from '@material-ui/icons/Image';\nimport AccountBalance from '@material-ui/icons/AccountBalance';\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\nimport EmojiEvents from '@material-ui/icons/EmojiEvents';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\n\nimport WorkIcon from '@material-ui/icons/Work';\nimport BeachAccessIcon from '@material-ui/icons/BeachAccess';\nimport {getNodes} from './remoteclient'\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n  }));\n\nfunction NodeExplorer(props) {\n    const { onNodeSelected, ...other } = props;\n    const classes = useStyles();\n    const [nodes, setNodes] = React.useState('');\n    React.useEffect(() => {\n        getNodes(nodeList=>{\n            console.log(\"NodeExplorer\", nodeList);\n            for (var i=0;i<nodeList.length;i++) {\n                nodeList[i].name=nodeList[i].identities[0].name.organisation;\n                nodeList[i].address=nodeList[i].addresses[0];\n            };\n            setNodes(nodeList);\n        });\n    }, []);\n    return (\n        <List className={classes.root}>\n            {nodes && nodes.map((node,i)=>{\n                return(\n                <ListItem onClick={()=>onNodeSelected(node)} style={{cursor:'pointer'}}>\n                    <ListItemAvatar>\n                    <Avatar>\n                        {node.name!='Notary' && <AccountTreeIcon />}\n                        {node.name=='Notary' && <AccountBalance />}\n                    </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText primary={node.name} secondary={node.address} />\n              </ListItem>\n                )\n            })\n            }\n        </List>\n    )\n}\nexport default NodeExplorer;","import JSONTree from 'react-json-tree'\nimport ReactJson from 'react-json-view'\n\nfunction NodeDetails(props) {\n    const { node, ...other } = props;\n    /*return (\n        <JSONTree data={node} />\n    )*/\n    return (\n        <div style={{textAlign:'left'}}>\n        <ReactJson src={node} />\n        </div>\n    )\n}\n\nexport default NodeDetails;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport {getNodes} from './remoteclient'\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: '90%',\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nexport default function GameBoard(props) {\n    const { onChange, ...other } = props;\n    const classes = useStyles();\n    const [escrow, setEscrow] = React.useState('');\n    const [counterParty, setCounterParty] = React.useState('');\n    const [choice, setChoice] = React.useState('');\n    const [nodes, setNodes] = React.useState('');\n    const [error, setError] = React.useState('');\n    const handleChoiceChange = (event) => {\n        setChoice(event.target.value);\n    };\n    const handleEscrowChange = (event) => {\n        setEscrow(event.target.value);\n    };\n    const handleCounterpartyChange = (event) => {\n        setCounterParty(event.target.value);\n    };\n\n    React.useEffect(() => {\n        getNodes(nodeList=>{\n            console.log(\"Gameboard\", nodeList);\n            for (var i=0;i<nodeList.length;i++) {\n                nodeList[i].name=nodeList[i].identities[0].name.organisation;\n            };\n            setNodes(nodeList);\n        });\n    }, []);\n    React.useEffect(() => {\n        let ready=false;\n        if (choice && counterParty && escrow) {\n            if (counterParty===escrow) {\n             setError(\"Escrow and counterparty cannot be the same party\");\n            } else {\n                let currentNode=nodes.find(node=>node.isCurrentNode);\n                if (currentNode.name===counterParty) {\n                    setError(\"Counterparty and current node cannot be the same node\");\n                } else if (currentNode.name===escrow) {\n                    setError(\"Escrow and current node cannot be the same node\");\n                } else if (counterParty==='Notary' || escrow==='Notary') {\n                    setError(\"Notary cannot be a signing party\");\n                } else {\n                    setError(false);\n                    ready=true;\n                }\n            }\n        }\n        if (onChange) {\n            onChange({ready, escrow, counterParty, choice});\n        }\n      }, [counterParty, escrow, choice]);\n    return (\n        <div>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">Choice</InputLabel>\n                <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={choice}\n                    onChange={handleChoiceChange}\n                >\n                    <MenuItem value={'rock'}>Rock</MenuItem>\n                    <MenuItem value={'paper'}>Paper</MenuItem>\n                    <MenuItem value={'scissors'}>Scissors</MenuItem>\n                </Select>\n            </FormControl>\n            <FormControl className={classes.formControl} error={error}>\n                <InputLabel id=\"demo-simple-select-label\">Escrow</InputLabel>\n                <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={escrow}\n                    onChange={handleEscrowChange}\n                >\n                    {\n                        nodes && nodes.map(node=>{\n                            return (\n                            <MenuItem value={node.name}>{node.name}</MenuItem>\n                            )\n                        })\n                    }\n                </Select>\n            </FormControl>\n            <FormControl className={classes.formControl} error={error}>\n                <InputLabel id=\"demo-simple-select-label\">Counter Party</InputLabel>\n                <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={counterParty}\n                    onChange={handleCounterpartyChange}\n                >\n                    {\n                        nodes && nodes.map(node=>{\n                            return (\n                            <MenuItem value={node.name}>{node.name}</MenuItem>\n                            )\n                        })\n                    }\n                </Select>\n            </FormControl>\n                <FormHelperText style={{display:error ? '' : 'none'}}>{error}</FormHelperText>\n        </div>\n    )\n}","import React from 'react';\nimport JSONTree from 'react-json-tree'\nimport ReactJson from 'react-json-view'\nimport {getTransactionDetails, sendAcceptChallenge} from './remoteclient'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport AccountBalance from '@material-ui/icons/AccountBalance';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n    },\n    button: {\n      marginTop: theme.spacing(1),\n      marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n      marginBottom: theme.spacing(2),\n    },\n    resetContainer: {\n      padding: theme.spacing(3),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: '90%',\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n  }));\n  \n  function getSteps(transactionDetails) {\n    return ['Issued State', 'Challenge State', 'Accepted State', 'Settled State'];\n  }\n\nfunction TransactionDetails(props) {\n    const { transaction, ...other } = props;\n    const [transactionDetails, setTransactionDetails] = React.useState([]);\n    const [choice, setChoice] = React.useState('');\n    React.useEffect(() => {\n        getTransactionDetails(transaction, function(transactionDetails) {\n            console.log(transactionDetails);\n            setTransactionDetails(transactionDetails);\n        })\n      }, []);\n      const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = getSteps(transactionDetails);\n\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n  const handleChoiceChange = (event) => {\n      setChoice(event.target.value);\n  };\n  const acceptChallenge = () => {\n    transactionDetails.ChallengeState.choice=choice;\n    sendAcceptChallenge(transactionDetails.ChallengeState, ()=>{\n      getTransactionDetails(transaction, function(transactionDetails) {\n          setTransactionDetails(transactionDetails);\n      })\n    })\n  }\n\n  function getStepContent(step, transactionDetails) {\n    let display=<></>\n  switch (step) {\n    case 0:\n      display=<>There is no Issued State</>;\n      if (transactionDetails) {\n          if (transactionDetails.ChallengeState && transactionDetails.ChallengeState.challenged.name == transactionDetails.currentNode.name) {\n              display=<>You are the counter party and not a signatory to this state.\n              Your vault only contains states of which you are a signatory</>;\n          } else {\n              display = <ReactJson src={transactionDetails.IssuedState} collapsed/>\n          }\n      }\n      return  <div>\n          {display}\n          </div>;\n    case 1:\n      display=<>There is no Challenge State</>;\n      if (transactionDetails) {\n          if (transactionDetails.IssuedState && transactionDetails.IssuedState.challenger.name == transactionDetails.currentNode.name) {\n              display=<>You are the challenger and not a signatory to this state.\n              Your vault only contains states of which you are a signatory</>;\n          } else  if (transactionDetails.ChallengeState) {\n              display = <ReactJson src={transactionDetails.ChallengeState} collapsed/>\n          }\n      }\n      return  <div>\n          {display}\n          </div>;\n    case 2:\n      display=<>There is no Accepted State</>;\n      if (transactionDetails) {\n          if (transactionDetails.IssuedState && transactionDetails.IssuedState.escrow.name == transactionDetails.currentNode.name) {\n              display=<>You are the escrow party and not a signatory to this state.\n              Your vault only contains states of which you are a signatory</>;\n          } else  if (transactionDetails.AcceptedState) {\n              display = <ReactJson src={transactionDetails.AcceptedState} collapsed/>\n          } else if (transactionDetails.ChallengeState && transactionDetails.ChallengeState.challenged.name == transactionDetails.currentNode.name) {\n            display = <>\n              <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">Choice</InputLabel>\n                <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={choice}\n                    onChange={handleChoiceChange}\n                >\n                    <MenuItem value={'rock'}>Rock</MenuItem>\n                    <MenuItem value={'paper'}>Paper</MenuItem>\n                    <MenuItem value={'scissors'}>Scissors</MenuItem>\n                </Select>\n            </FormControl>\n                <Button \n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.button}\n                  onClick={acceptChallenge}\n                  disabled={choice==''}\n                >\n                  Accept\n                </Button>\n                </>\n        }\n      }\n      return  <div>\n          {display}\n          </div>;\n    case 3:\n      display=<>There is no Settled State</>;\n      if (transactionDetails && transactionDetails.SettledState) {\n              display = <ReactJson src={transactionDetails.SettledState} collapsed/>\n      }\n      return  <div>\n          {display}\n          </div>;\n    default:\n      return 'Unknown step';\n  }\n}\n    /*return (\n        <div style={{textAlign:'left'}}>\n        <ReactJson src={transaction} />\n        </div>\n    )*/\n    return (\n        <div className={classes.root} style={{textAlign:'left'}}>\n          <Stepper activeStep={activeStep} orientation=\"vertical\">\n            {steps.map((label, index) => (\n              <Step key={label}>\n                <StepLabel onClick={()=>setActiveStep(index)}>{label}</StepLabel>\n                <StepContent>\n                  <Typography>{getStepContent(index, transactionDetails)}</Typography>\n                  {/*\n                  <div className={classes.actionsContainer}>\n                    <div>\n                      <Button\n                        disabled={activeStep === 0}\n                        onClick={handleBack}\n                        className={classes.button}\n                      >\n                        Back\n                      </Button>\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={handleNext}\n                        className={classes.button}\n                      >\n                        {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                      </Button>\n                    </div>\n                  </div>\n                  */}\n                </StepContent>\n              </Step>\n            ))}\n          </Stepper>\n          {/*activeStep === steps.length && (\n            <Paper square elevation={0} className={classes.resetContainer}>\n              <Typography>All steps completed - you&apos;re finished</Typography>\n              <Button onClick={handleReset} className={classes.button}>\n                Reset\n              </Button>\n            </Paper>\n          )*/}\n        </div>\n      );\n}\nexport default TransactionDetails;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport PersonIcon from '@material-ui/icons/Person';\nimport AddIcon from '@material-ui/icons/Add';\nimport Typography from '@material-ui/core/Typography';\nimport { blue } from '@material-ui/core/colors';\nimport {getNodes} from './remoteclient'\nimport ImageIcon from '@material-ui/icons/Image';\nimport AccountBalance from '@material-ui/icons/AccountBalance';\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\nimport EmojiEvents from '@material-ui/icons/EmojiEvents';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\n\nimport WorkIcon from '@material-ui/icons/Work';\nimport BeachAccessIcon from '@material-ui/icons/BeachAccess';\n\nconst useStyles = makeStyles({\n  avatar: {\n    backgroundColor: blue[100],\n    color: blue[600],\n  },\n});\n\nfunction MockEnvironmentDialogue(props) {\n  const classes = useStyles();\n  const { onClose, selectedValue, open } = props;\n  const [nodes, setNodes] = React.useState('');\n  React.useEffect(() => {\n    getNodes(nodeList=>{\n        console.log(\"NodeExplorer\", nodeList);\n        for (var i=0;i<nodeList.length;i++) {\n            nodeList[i].name=nodeList[i].identities[0].name.organisation;\n            nodeList[i].address=nodeList[i].addresses[0];\n        };\n        setNodes(nodeList);\n    });\n}, []);\n  const handleClose = () => {\n    onClose(selectedValue);\n  };\n\n  const handleListItemClick = (value) => {\n    onClose(value);\n  };\n\n  return (\n    <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n      <DialogTitle id=\"simple-dialog-title\">Change mock node</DialogTitle>\n      <List>\n        {nodes && nodes.map((node) => (\n          <ListItem button onClick={() => handleListItemClick(node)} key={node.name}>\n            <ListItemAvatar>\n                    <Avatar>\n                        {node.name!='Notary' && <AccountTreeIcon />}\n                        {node.name=='Notary' && <AccountBalance />}\n                    </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={node.name} />\n          </ListItem>\n        ))}\n      </List>\n    </Dialog>\n  );\n}\n\nMockEnvironmentDialogue.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  selectedValue: PropTypes.string.isRequired,\n};\nexport default MockEnvironmentDialogue;","import React from 'react';\nimport logo from './logo.svg';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport './App.css';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport NavigationIcon from '@material-ui/icons/Navigation';\nimport PlayArrow from '@material-ui/icons/PlayArrow';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport SwipeableViews from 'react-swipeable-views';\nimport Zoom from '@material-ui/core/Zoom';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { green } from '@material-ui/core/colors';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport UpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport TransactionList from './TransactionList'\nimport NodeExplorer from './NodeExplorer'\nimport NodeDetails from './NodeDetails'\nimport GameBoard from './GameBoard';\nimport {sendChallenge} from './remoteclient'\nimport TransactionDetails from './TransactionDetails';\nimport MockEnvironmentDialogue from './MockEnvironmentDialogue'\n/*\n*/\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`action-tabpanel-${index}`}\n      aria-labelledby={`action-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    width: 500,\n    position: 'relative',\n    minHeight: 200,\n  },\n  fab: {\n    position: 'absolute',\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n  fabGreen: {\n    color: theme.palette.common.white,\n    backgroundColor: green[500],\n    '&:hover': {\n      backgroundColor: green[600],\n    },\n  },\n}));\nfunction a11yProps(index) {\n  return {\n    id: `action-tab-${index}`,\n    'aria-controls': `action-tabpanel-${index}`,\n  };\n}\n\nfunction App() {\n  const [value, setValue] = React.useState(0);\n  const [gameboardReady, setGameboardReady] = React.useState(false);\n  const [gameboard, setGameboard] = React.useState({});\n  const [nodeDetails, setNodeDetails] = React.useState({});\n  const [transactionDetails, setTransactionDetails] = React.useState({});\n  const [mockEnvironmentOpen, setMockEnvironmentOpen] = React.useState(false);\n  const startGame = () =>{\n    setValue(3);\n  }\n  const issueChallenge = () => {\n    sendChallenge(gameboard, function(reply) {\n      console.log(\"challenge issued\",reply);\n      setValue(0)\n    })\n  }\n  const cancelGame = () =>{\n    setValue(0);\n  }\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  const showNodeDetails = node => {\n    setNodeDetails(node);\n    setValue(2);\n  }\n  const showNodeTransactionDetails = transaction => {\n    setTransactionDetails(transaction);\n    setValue(2);\n  }\n\n  const handleChangeIndex = (index) => {\n    setValue(index);\n  };\n  const changeGameboard = (game) => {\n    setGameboardReady(game.ready);\n    setGameboard(game);\n  }\n  const mockEnvironment = () => {\n    setMockEnvironmentOpen(true);\n  }\n  React.useEffect(() => {\n    console.log(\"value\", value)\n      if (value!=2) {\n        setNodeDetails(null);\n        setTransactionDetails(null)\n      }\n  }, [value]);\n  const classes = useStyles();\n  const theme = useTheme();\n  const transitionDuration = {\n    enter: theme.transitions.duration.enteringScreen,\n    exit: theme.transitions.duration.leavingScreen,\n  };\n\nconst fabs = [\n  {\n    color: 'primary',\n    className: classes.fab,\n    icon: <AddIcon />,\n    label: 'Add',\n    action: startGame,  \n    color2: 'secondary',\n    display2: 'none'\n  },\n  {\n    color: 'primary',\n    className: classes.fab,\n    icon: <AddIcon />,\n    label: 'Add',\n    action: startGame,\n    color2: 'secondary',\n    display2: 'none'\n  },\n  {\n    color: 'inherit',\n    className: clsx(classes.fab, classes.fabGreen),\n    icon: <UpIcon />,\n    label: 'Expand',\n    display: 'none',\n    display2: 'none'\n  },\n  {\n    color: 'primary',\n    className: clsx(classes.fab, classes.fabGreen),\n    disabled: !gameboardReady,\n    icon: <PlayArrow />,\n    icon2: <CancelIcon />,\n    label: 'Edit',\n    action: issueChallenge,\n    className2: clsx(classes.fab),\n    color2: 'secondary',\n    action2: cancelGame\n  }\n];\n  return (\n    <div className=\"App\">\n     <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n          aria-label=\"action tabs example\"\n        >\n          <Tab label=\"Transactions\" {...a11yProps(0)} />\n          <Tab label=\"Nodes\" {...a11yProps(1)} />\n          <Tab label={nodeDetails ? nodeDetails.name : transactionDetails ? transactionDetails.challengerChoice : \"\"} {...a11yProps(2)} />\n        </Tabs>\n      </AppBar>\n      <SwipeableViews\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n        index={value}\n        onChangeIndex={handleChangeIndex}\n      >\n        <TabPanel value={value} index={0} dir={theme.direction} >\n          <TransactionList onTransactionSelected={showNodeTransactionDetails}/>\n        </TabPanel>\n        <TabPanel value={value} index={1} dir={theme.direction}>\n        <NodeExplorer onNodeSelected={showNodeDetails}/>\n        </TabPanel>\n        <TabPanel value={value} index={2} dir={theme.direction}>\n          {nodeDetails &&\n            <NodeDetails node={nodeDetails}/>\n          }\n          {transactionDetails &&\n            <TransactionDetails transaction={transactionDetails}/>\n          }\n          \n        </TabPanel>\n        <TabPanel value={value} index={3} dir={theme.direction}>\n          <GameBoard onChange={changeGameboard}/>\n        </TabPanel>\n      </SwipeableViews>\n      {fabs.map((fab, index) => (\n        <>\n        <Zoom\n          key={fab.color}\n          in={value === index}\n          timeout={transitionDuration}\n          style={{\n            transitionDelay: `${value === index ? transitionDuration.exit : 0}ms`,\n          }}\n          unmountOnExit\n        >\n          <Fab aria-label={fab.label} className={fab.className} color={fab.color}\n            style={{display:fab.display}}\n            disabled={fab.disabled}\n            onClick={fab.action}>\n            {fab.icon}\n          </Fab>\n        </Zoom>\n\n        <Zoom\n          key={fab.color}\n          in={value === index}\n          timeout={transitionDuration}\n          style={{\n            transitionDelay: `${value === index ? transitionDuration.exit : 0}ms`,\n          }}\n          unmountOnExit\n        >\n          <Fab aria-label={fab.label} className={fab.className2} color={fab.color2}\n            style={{display:fab.display2, right:'80px'}}\n            onClick={fab.action2}>\n            {fab.icon2}\n          </Fab>\n        </Zoom>\n\n        </>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}